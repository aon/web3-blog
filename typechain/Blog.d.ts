/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BlogInterface extends ethers.utils.Interface {
  functions: {
    "banPost(uint256,bool)": FunctionFragment;
    "createPost(string,string,string,bool)": FunctionFragment;
    "fetchPost(uint256)": FunctionFragment;
    "fetchPosts()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBlogName(string)": FunctionFragment;
    "updatePost(uint256,string,string,string,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "banPost",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "createPost",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchPost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchPosts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBlogName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePost",
    values: [BigNumberish, string, string, string, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "banPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fetchPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fetchPosts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBlogName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePost", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PostBanned(uint256,bool)": EventFragment;
    "PostCreated(uint256)": EventFragment;
    "PostUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostBanned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostUpdated"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PostBannedEvent = TypedEvent<
  [BigNumber, boolean] & { id: BigNumber; isBanned: boolean }
>;

export type PostCreatedEvent = TypedEvent<[BigNumber] & { id: BigNumber }>;

export type PostUpdatedEvent = TypedEvent<[BigNumber] & { id: BigNumber }>;

export class Blog extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BlogInterface;

  functions: {
    banPost(
      _id: BigNumberish,
      _isBanned: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPost(
      _title: string,
      _contentHash: string,
      _imageHash: string,
      _isPublished: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchPost(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string, string, boolean, string] & {
          id: BigNumber;
          title: string;
          contentHash: string;
          imageHash: string;
          isPublished: boolean;
          author: string;
        }
      ]
    >;

    fetchPosts(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, string, string, boolean, string] & {
          id: BigNumber;
          title: string;
          contentHash: string;
          imageHash: string;
          isPublished: boolean;
          author: string;
        })[]
      ]
    >;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBlogName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePost(
      _id: BigNumberish,
      _title: string,
      _contentHash: string,
      _imageHash: string,
      _isPublished: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  banPost(
    _id: BigNumberish,
    _isBanned: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPost(
    _title: string,
    _contentHash: string,
    _imageHash: string,
    _isPublished: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchPost(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, boolean, string] & {
      id: BigNumber;
      title: string;
      contentHash: string;
      imageHash: string;
      isPublished: boolean;
      author: string;
    }
  >;

  fetchPosts(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, string, string, boolean, string] & {
      id: BigNumber;
      title: string;
      contentHash: string;
      imageHash: string;
      isPublished: boolean;
      author: string;
    })[]
  >;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBlogName(
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePost(
    _id: BigNumberish,
    _title: string,
    _contentHash: string,
    _imageHash: string,
    _isPublished: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    banPost(
      _id: BigNumberish,
      _isBanned: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    createPost(
      _title: string,
      _contentHash: string,
      _imageHash: string,
      _isPublished: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchPost(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, boolean, string] & {
        id: BigNumber;
        title: string;
        contentHash: string;
        imageHash: string;
        isPublished: boolean;
        author: string;
      }
    >;

    fetchPosts(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, string, string, boolean, string] & {
        id: BigNumber;
        title: string;
        contentHash: string;
        imageHash: string;
        isPublished: boolean;
        author: string;
      })[]
    >;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBlogName(_name: string, overrides?: CallOverrides): Promise<void>;

    updatePost(
      _id: BigNumberish,
      _title: string,
      _contentHash: string,
      _imageHash: string,
      _isPublished: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PostBanned(uint256,bool)"(
      id?: null,
      isBanned?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { id: BigNumber; isBanned: boolean }
    >;

    PostBanned(
      id?: null,
      isBanned?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { id: BigNumber; isBanned: boolean }
    >;

    "PostCreated(uint256)"(
      id?: null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    PostCreated(id?: null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    "PostUpdated(uint256)"(
      id?: null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    PostUpdated(id?: null): TypedEventFilter<[BigNumber], { id: BigNumber }>;
  };

  estimateGas: {
    banPost(
      _id: BigNumberish,
      _isBanned: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPost(
      _title: string,
      _contentHash: string,
      _imageHash: string,
      _isPublished: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchPost(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    fetchPosts(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBlogName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePost(
      _id: BigNumberish,
      _title: string,
      _contentHash: string,
      _imageHash: string,
      _isPublished: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    banPost(
      _id: BigNumberish,
      _isBanned: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPost(
      _title: string,
      _contentHash: string,
      _imageHash: string,
      _isPublished: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchPost(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchPosts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBlogName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePost(
      _id: BigNumberish,
      _title: string,
      _contentHash: string,
      _imageHash: string,
      _isPublished: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
